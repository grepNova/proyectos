package com.generado;

// Generated 11-dic-2012 20:33:51 by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;

/**
 * FosUser generated by hbm2java
 */
@Entity
@Table(name = "fos_user", uniqueConstraints = {
		@UniqueConstraint(columnNames = "email_canonical"),
		@UniqueConstraint(columnNames = "username_canonical"),
		@UniqueConstraint(columnNames = "cedula") })
public class FosUser implements java.io.Serializable {

	private int id;
	private String username;
	private String usernameCanonical;
	private String email;
	private String emailCanonical;
	private boolean enabled;
	private String salt;
	private String password;
	private Date lastLogin;
	private boolean locked;
	private boolean expired;
	private Date expiresAt;
	private String confirmationToken;
	private Date passwordRequestedAt;
	private String roles;
	private boolean credentialsExpired;
	private Date credentialsExpireAt;
	private Date createdAt;
	private Date updatedAt;
	private String cedula;
	private String nombres;
	private String apellidos;
	private String direccion;
	private Date created;
	private Date updated;
	private Set<Email> emails = new HashSet<Email>(0);
	private Set<Unidad> unidads = new HashSet<Unidad>(0);
	private Set<Mensajes> mensajeses = new HashSet<Mensajes>(0);
	private Set<Despacho> despachosForCliente = new HashSet<Despacho>(0);
	private Set<Instalacion> instalacions = new HashSet<Instalacion>(0);
	private Set<Telefono> telefonos = new HashSet<Telefono>(0);
	private Set<Despacho> despachosForUsuario = new HashSet<Despacho>(0);
	private Set<Celular> celulars = new HashSet<Celular>(0);
	private Set<FosGroup> fosGroups = new HashSet<FosGroup>(0);
	private Set<Direccion> direccions = new HashSet<Direccion>(0);
	private Set<Propietario> propietarios = new HashSet<Propietario>(0);
	private Set<Despacho> despachosForUserCancel = new HashSet<Despacho>(0);

	public FosUser() {
	}

	public FosUser(int id, String username, String usernameCanonical,
			String email, String emailCanonical, boolean enabled, String salt,
			String password, boolean locked, boolean expired, String roles,
			boolean credentialsExpired, Date createdAt, Date updatedAt,
			Date created, Date updated) {
		this.id = id;
		this.username = username;
		this.usernameCanonical = usernameCanonical;
		this.email = email;
		this.emailCanonical = emailCanonical;
		this.enabled = enabled;
		this.salt = salt;
		this.password = password;
		this.locked = locked;
		this.expired = expired;
		this.roles = roles;
		this.credentialsExpired = credentialsExpired;
		this.createdAt = createdAt;
		this.updatedAt = updatedAt;
		this.created = created;
		this.updated = updated;
	}

	public FosUser(int id, String username, String usernameCanonical,
			String email, String emailCanonical, boolean enabled, String salt,
			String password, Date lastLogin, boolean locked, boolean expired,
			Date expiresAt, String confirmationToken, Date passwordRequestedAt,
			String roles, boolean credentialsExpired, Date credentialsExpireAt,
			Date createdAt, Date updatedAt, String cedula, String nombres,
			String apellidos, String direccion, Date created, Date updated,
			Set<Email> emails, Set<Unidad> unidads, Set<Mensajes> mensajeses,
			Set<Despacho> despachosForCliente, Set<Instalacion> instalacions,
			Set<Telefono> telefonos, Set<Despacho> despachosForUsuario,
			Set<Celular> celulars, Set<FosGroup> fosGroups,
			Set<Direccion> direccions, Set<Propietario> propietarios,
			Set<Despacho> despachosForUserCancel) {
		this.id = id;
		this.username = username;
		this.usernameCanonical = usernameCanonical;
		this.email = email;
		this.emailCanonical = emailCanonical;
		this.enabled = enabled;
		this.salt = salt;
		this.password = password;
		this.lastLogin = lastLogin;
		this.locked = locked;
		this.expired = expired;
		this.expiresAt = expiresAt;
		this.confirmationToken = confirmationToken;
		this.passwordRequestedAt = passwordRequestedAt;
		this.roles = roles;
		this.credentialsExpired = credentialsExpired;
		this.credentialsExpireAt = credentialsExpireAt;
		this.createdAt = createdAt;
		this.updatedAt = updatedAt;
		this.cedula = cedula;
		this.nombres = nombres;
		this.apellidos = apellidos;
		this.direccion = direccion;
		this.created = created;
		this.updated = updated;
		this.emails = emails;
		this.unidads = unidads;
		this.mensajeses = mensajeses;
		this.despachosForCliente = despachosForCliente;
		this.instalacions = instalacions;
		this.telefonos = telefonos;
		this.despachosForUsuario = despachosForUsuario;
		this.celulars = celulars;
		this.fosGroups = fosGroups;
		this.direccions = direccions;
		this.propietarios = propietarios;
		this.despachosForUserCancel = despachosForUserCancel;
	}

	@Id
	@Column(name = "id", unique = true, nullable = false)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@Column(name = "username", nullable = false)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Column(name = "username_canonical", unique = true, nullable = false)
	public String getUsernameCanonical() {
		return this.usernameCanonical;
	}

	public void setUsernameCanonical(String usernameCanonical) {
		this.usernameCanonical = usernameCanonical;
	}

	@Column(name = "email", nullable = false)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Column(name = "email_canonical", unique = true, nullable = false)
	public String getEmailCanonical() {
		return this.emailCanonical;
	}

	public void setEmailCanonical(String emailCanonical) {
		this.emailCanonical = emailCanonical;
	}

	@Column(name = "enabled", nullable = false)
	public boolean isEnabled() {
		return this.enabled;
	}

	public void setEnabled(boolean enabled) {
		this.enabled = enabled;
	}

	@Column(name = "salt", nullable = false)
	public String getSalt() {
		return this.salt;
	}

	public void setSalt(String salt) {
		this.salt = salt;
	}

	@Column(name = "password", nullable = false)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_login", length = 22)
	public Date getLastLogin() {
		return this.lastLogin;
	}

	public void setLastLogin(Date lastLogin) {
		this.lastLogin = lastLogin;
	}

	@Column(name = "locked", nullable = false)
	public boolean isLocked() {
		return this.locked;
	}

	public void setLocked(boolean locked) {
		this.locked = locked;
	}

	@Column(name = "expired", nullable = false)
	public boolean isExpired() {
		return this.expired;
	}

	public void setExpired(boolean expired) {
		this.expired = expired;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "expires_at", length = 22)
	public Date getExpiresAt() {
		return this.expiresAt;
	}

	public void setExpiresAt(Date expiresAt) {
		this.expiresAt = expiresAt;
	}

	@Column(name = "confirmation_token")
	public String getConfirmationToken() {
		return this.confirmationToken;
	}

	public void setConfirmationToken(String confirmationToken) {
		this.confirmationToken = confirmationToken;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "password_requested_at", length = 22)
	public Date getPasswordRequestedAt() {
		return this.passwordRequestedAt;
	}

	public void setPasswordRequestedAt(Date passwordRequestedAt) {
		this.passwordRequestedAt = passwordRequestedAt;
	}

	@Column(name = "roles", nullable = false)
	public String getRoles() {
		return this.roles;
	}

	public void setRoles(String roles) {
		this.roles = roles;
	}

	@Column(name = "credentials_expired", nullable = false)
	public boolean isCredentialsExpired() {
		return this.credentialsExpired;
	}

	public void setCredentialsExpired(boolean credentialsExpired) {
		this.credentialsExpired = credentialsExpired;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "credentials_expire_at", length = 22)
	public Date getCredentialsExpireAt() {
		return this.credentialsExpireAt;
	}

	public void setCredentialsExpireAt(Date credentialsExpireAt) {
		this.credentialsExpireAt = credentialsExpireAt;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_at", nullable = false, length = 22)
	public Date getCreatedAt() {
		return this.createdAt;
	}

	public void setCreatedAt(Date createdAt) {
		this.createdAt = createdAt;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updated_at", nullable = false, length = 22)
	public Date getUpdatedAt() {
		return this.updatedAt;
	}

	public void setUpdatedAt(Date updatedAt) {
		this.updatedAt = updatedAt;
	}

	@Column(name = "cedula", unique = true, length = 13)
	public String getCedula() {
		return this.cedula;
	}

	public void setCedula(String cedula) {
		this.cedula = cedula;
	}

	@Column(name = "nombres")
	public String getNombres() {
		return this.nombres;
	}

	public void setNombres(String nombres) {
		this.nombres = nombres;
	}

	@Column(name = "apellidos")
	public String getApellidos() {
		return this.apellidos;
	}

	public void setApellidos(String apellidos) {
		this.apellidos = apellidos;
	}

	@Column(name = "direccion")
	public String getDireccion() {
		return this.direccion;
	}

	public void setDireccion(String direccion) {
		this.direccion = direccion;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created", nullable = false, length = 22)
	public Date getCreated() {
		return this.created;
	}

	public void setCreated(Date created) {
		this.created = created;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "updated", nullable = false, length = 22)
	public Date getUpdated() {
		return this.updated;
	}

	public void setUpdated(Date updated) {
		this.updated = updated;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "fosUser")
	public Set<Email> getEmails() {
		return this.emails;
	}

	public void setEmails(Set<Email> emails) {
		this.emails = emails;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "fosUser")
	public Set<Unidad> getUnidads() {
		return this.unidads;
	}

	public void setUnidads(Set<Unidad> unidads) {
		this.unidads = unidads;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "fosUser")
	public Set<Mensajes> getMensajeses() {
		return this.mensajeses;
	}

	public void setMensajeses(Set<Mensajes> mensajeses) {
		this.mensajeses = mensajeses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "fosUserByCliente")
	public Set<Despacho> getDespachosForCliente() {
		return this.despachosForCliente;
	}

	public void setDespachosForCliente(Set<Despacho> despachosForCliente) {
		this.despachosForCliente = despachosForCliente;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "fosUser")
	public Set<Instalacion> getInstalacions() {
		return this.instalacions;
	}

	public void setInstalacions(Set<Instalacion> instalacions) {
		this.instalacions = instalacions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "fosUser")
	public Set<Telefono> getTelefonos() {
		return this.telefonos;
	}

	public void setTelefonos(Set<Telefono> telefonos) {
		this.telefonos = telefonos;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "fosUserByUsuario")
	public Set<Despacho> getDespachosForUsuario() {
		return this.despachosForUsuario;
	}

	public void setDespachosForUsuario(Set<Despacho> despachosForUsuario) {
		this.despachosForUsuario = despachosForUsuario;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "fosUser")
	public Set<Celular> getCelulars() {
		return this.celulars;
	}

	public void setCelulars(Set<Celular> celulars) {
		this.celulars = celulars;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "fos_user_group", joinColumns = { @JoinColumn(name = "user_id", nullable = false, updatable = false) }, inverseJoinColumns = { @JoinColumn(name = "group_id", nullable = false, updatable = false) })
	public Set<FosGroup> getFosGroups() {
		return this.fosGroups;
	}

	public void setFosGroups(Set<FosGroup> fosGroups) {
		this.fosGroups = fosGroups;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "fosUser")
	public Set<Direccion> getDireccions() {
		return this.direccions;
	}

	public void setDireccions(Set<Direccion> direccions) {
		this.direccions = direccions;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "fosUser")
	public Set<Propietario> getPropietarios() {
		return this.propietarios;
	}

	public void setPropietarios(Set<Propietario> propietarios) {
		this.propietarios = propietarios;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "fosUserByUserCancel")
	public Set<Despacho> getDespachosForUserCancel() {
		return this.despachosForUserCancel;
	}

	public void setDespachosForUserCancel(Set<Despacho> despachosForUserCancel) {
		this.despachosForUserCancel = despachosForUserCancel;
	}

}
